import pygame
def unmutemusic():
    global currentvol
    root.unmuteButton.grid_remove()
    root.muteButton.grid()
    mixer.music.set_volume(currentvol)


def mutemusic():
    global currentvol
    root.muteButton.grid_remove()
    root.unmuteButton.grid()
    currentvol = mixer.music.get_volume()
    mixer.music.set_volume(0)


def resumemusic():
    root.ResumeButton.grid_remove()
    root.PauseButton.grid()
    mixer.music.unpause()
    AudioStatusLabel.configure(text='playing.....')


def volumeup():
    vol = mixer.music.get_volume()
    ProgressbarLabel.grid()
    if (vol >= vol * 100):
        mixer.music.set_volume(vol + 0.01)
    else:
        mixer.music.set_volume(vol + 0.02)
    ProgressbarvolumeLabel.configure(text='{}%'.format(int(mixer.music.get_volume() * 100)))
    Progressbarvolume['value'] = mixer.music.get_volume() * 100


def volumedown():
    vol = mixer.music.get_volume()
    ProgressbarLabel.grid()
    if (vol <= vol * 100):
        mixer.music.set_volume(vol - 0.01)
    else:
        mixer.music.set_volume(vol - 0.05)
    ProgressbarvolumeLabel.configure(text='{}%'.format(int(mixer.music.get_volume() * 100)))
    Progressbarvolume['value'] = mixer.music.get_volume() * 100


def pausemusic():
    mixer.music.pause()
    root.PauseButton.grid_remove()
    root.ResumeButton.grid()
    AudioStatusLabel.configure(text='paused....')


def playmusic():
    song = song_box.get(ACTIVE)
    song = f'C:/Users/mansi yoyoy/Downloads/{song}.mp3'
    pygame.mixer.music.load(song)
    root.muteButton.grid()
    pygame.mixer.music.play(loops=0)
    mixer.music.set_volume(0.4)
    Progressbarvolume['value'] = 40
    ProgressbarvolumeLabel['text'] = '40%'
    AudioStatusLabel.configure(text='playing.....')

    play_time()

    # grab song lenght time info


def play_time():
    # grab current song Elapsed time
    current_time = pygame.mixer.music.get_pos() / 1000

    # convert to time format
    converted_current_time = time.strftime('%H:%M:%S', time.gmtime(current_time))

    # Get the currently playing  song
    current_song = song_box.curselection()
    # Grab song title from playlist
    song = song_box.get(current_song)
    # adddirextory structure and mp3 to song title
    song = f'C:/Users/mansi yoyoy/Downloads/{song}.mp3'

    # load song with mutagen
    song_mut = MP3(song)
    # get song length
    song_length = song_mut.info.length
    # convert to ti e format
    converted_song_length = time.strftime('%H:%M:%S', time.gmtime(song_length))

    # output time to status bar
    status_bar.config(text=f'Time Elapsed:{converted_current_time} of {converted_song_length}')

    # updatetime
    status_bar.after(1000, play_time)


def add_song():
    song = filedialog.askopenfilename(initialdir='Downloads/', title='choose a song', filetypes=(('mp3 Files', '*mp3'),))

    # strip out the directory info
    song = song.replace("C:/Users/mansi yoyoy/Downloads", "")
    song = song.replace(".mp3", "")

    song_box.insert(END, song)


def add_many_song():
    songs = filedialog.askopenfilenames(initialdir='music/', title='choose a song', filetypes=(('mp3 Files', '*mp3'),))

    #
    for song in songs:
        song = song.replace("C:/Users/mansi yoyoy/Downloads", "")
        song = song.replace(".mp3", "")

        song_box.insert(END, song)


def next_song():
    # Get the current  song number
    next_one = song_box.curselection()
    # Add one to the current song number
    next_one = next_one[0] + 1
    # Grab song title from playlist
    song = song_box.get(next_one)
    # adddirextory structure and mp3 to song title
    song = f'C:/Users/mansi yoyoy/Downloads/{song}.mp3'
    # load the play list
    pygame.mixer.music.load(song)
    pygame.mixer.music.play(loops=0)

    # move active bar in playlist listbox
    song_box.selection_clear(0, END)

    # Active new song bar
    song_box.activate(next_one)

    # set active bar to next song
    song_box.selection_set(next_one, last=None)


def previous_song():
    # Get the current  song number
    next_one = song_box.curselection()
    # Add one to the current song number
    next_one = next_one[0] - 1
    # Grab song title from playlist
    song = song_box.get(next_one)
    # add dirextory structure and mp3 to song title
    song = f'C:/Users/mansi yoyoy/Downloads/{song}.mp3'
    # load the play list
    pygame.mixer.music.load(song)
    pygame.mixer.music.play(loops=0)

    # move active bar in playlist listbox
    song_box.selection_clear(0, END)

    # Active new song bar
    song_box.activate(next_one)

    # set active bar to next song
    song_box.selection_set(next_one, last=None)


def delete_song():
    song_box.delete(ANCHOR)
    pygame.mixer.music.stop()


def delete_all_songs():
    song_box.delete(0, END)
    pygame.mixer.music.stop()


def createwidthes():
    global imbrowse
    global implay
    global impause
    global imvolumeup
    global imvolumedown
    global imResume
    global immute
    global imunmute
    global AudioStatusLabel
    global ProgressbarLabel
    global ProgressbarvolumeLabel
    global Progressbarvolume
    global ProgressbarMusicLabel
    global ProgressbarMusic
    global imnext
    global imprevious
    ###################################################################################Image Register
    impause = PhotoImage(file='pause.png')
    imvolumeup = PhotoImage(file='volume-up.png')
    imvolumedown = PhotoImage(file='volume-down.png')
    implay = PhotoImage(file='video-player.png')
    imResume = PhotoImage(file='video-player.png')
    immute = PhotoImage(file='mute.png')
    imunmute = PhotoImage(file='no-sound.png')
    imnext = PhotoImage(file='next.png')
    imprevious = PhotoImage(file='previous.png')

    #############################################################################change size of images:

    implay = implay.subsample(18, 18)
    impause = impause.subsample(18, 18)
    imvolumeup = imvolumeup.subsample(18, 18)
    imvolumedown = imvolumedown.subsample(18, 18)
    imResume = imResume.subsample(18, 18)
    immute = immute.subsample(18, 18)
    imunmute = imunmute.subsample(18, 18)
    imnext = imnext.subsample(18, 18)
    imprevious = imprevious.subsample(18, 18)

    ###################################################################################### labels :
    Tracklabel = Label(root, text='select Audio Track:', bg='brown', font=('arial', 15, 'italic bold'))
    Tracklabel.grid(row=0, column=0, padx=20, pady=20)
    AudioStatusLabel = Label(root, text='', bg='brown', font=('arial', 15, 'italic bold'), width=20)
    AudioStatusLabel.grid(row=2, column=1)

    ############################################################################ Entry boX :

    ###############################################################################control frame:
    controls_frame = Frame(root)
    controls_frame.grid()

    ############################################################################buttons:

    PlayButton = Button(root, text='Play', bg='white', font=('arial', 13, 'italic bold'), width=150, bd=5,
                        activebackground='black', image=implay, compound=RIGHT, command=playmusic)
    PlayButton.grid(row=1, column=1, padx=20, pady=20)

    root.PauseButton = Button(root, text='Pause', bg='white', font=('arial', 13, 'italic bold'), width=150, bd=5,
                              activebackground='black', image=impause, compound=RIGHT, command=pausemusic)
    root.PauseButton.grid(row=4, column=0, padx=20, pady=20)

    root.ResumeButton = Button(root, text='Resume', bg='white', font=('arial', 13, 'italic bold'), width=150, bd=5,
                               activebackground='black', image=imResume, compound=RIGHT, command=resumemusic)
    root.ResumeButton.grid(row=4, column=0, padx=20, pady=20)
    root.ResumeButton.grid_remove()

    root.muteButton = Button(root, text='Mute', width=150, bg='white', font=('arial', 13, 'italic bold'),
                             activebackground='black', bd=5,
                             image=immute, compound=RIGHT, command=mutemusic)
    root.muteButton.grid(row=4, column=2)
    root.muteButton.grid_remove()

    root.unmuteButton = Button(root, text='Unmute', width=150, bg='white', font=('arial', 13, 'italic bold'),
                               activebackground='black', bd=5,
                               image=imunmute, compound=RIGHT, command=unmutemusic)
    root.unmuteButton.grid(row=4, column=2)
    root.unmuteButton.grid_remove()

    VolumeupButton = Button(root, text='Volumeup', bg='white', font=('arial', 13, 'italic bold'), width=150, bd=5,
                            activebackground='black', image=imvolumeup, compound=RIGHT, command=volumeup)
    VolumeupButton.grid(row=2, column=2, padx=20, pady=20)

    nextsongButton = Button(root, text='Nextsong', bg='white', font=('arial', 13, 'italic bold'), width=140, bd=5,
                            activebackground='black', image=imnext, compound=RIGHT, command=next_song)

    nextsongButton.grid(row=1, column=2, padx=20, pady=20)

    previousButton = Button(root, text='Pre song', bg='white', font=('arial', 13, 'italic bold'), width=140, bd=5,
                            activebackground='black', image=imprevious, compound=RIGHT, command=previous_song)
    previousButton.grid(row=1, column=0, padx=20, pady=20)

    VolumedownButton = Button(root, text='Volumedown', bg='white', font=('arial', 13, 'italic bold'), width=150, bd=5,
                              activebackground='black', image=imvolumedown, compound=RIGHT, command=volumedown)
    VolumedownButton.grid(row=2, column=0, padx=20, pady=20)

    #########################################################################################progracebarvolume
    ProgressbarLabel = Label(root, text='', bg='red')
    ProgressbarLabel.grid(row=0, column=3, rowspan=3, padx=20, pady=20)
    ProgressbarLabel.grid_remove()

    Progressbarvolume = Progressbar(ProgressbarLabel, orient=VERTICAL, mode='determinate',
                                    value=0, length=190)
    Progressbarvolume.grid(row=0, column=0, ipadx=5)

    ProgressbarvolumeLabel = Label(ProgressbarLabel, text=0, bg='lightgray', width=3)
    ProgressbarvolumeLabel.grid(row=0, column=0)

    ########################################################################################### create status bar


############################################################################

from tkinter import *
from tkinter import filedialog
from pygame import mixer
from tkinter.ttk import Progressbar
import time
from mutagen.mp3 import MP3
from PIL import Image,ImageTk

root = Tk()

root.geometry('1000x575+200+200')
root.title('simple music player...')
root.iconbitmap('icon.ico')
root.resizable(False, False)
root.configure(bg='black')

###################adding image
image=Image.open('image5.jpeg')
photo=ImageTk.PhotoImage(image)

label=Label(root,image=photo,bg='black')
label.place(x=0,y=0)

###########################################################################playlistbox
song_box = Listbox(root, bg='black', fg='white', width=70, selectbackground='gray', selectforeground='black')
song_box.grid(row=0, column=1, pady=20)
###################################################################menu
my_menu = Menu(root)
root.configure(menu=my_menu)
######################################################################add song menu
add_song_menu = Menu(my_menu)
my_menu.add_cascade(label='add songs', menu=add_song_menu)
add_song_menu.add_command(label='add one songs to playlist', command=add_song)
# add many song
add_song_menu.add_command(label='add many songs to playlist', command=add_many_song)

#
remove_song_menu = Menu(my_menu)
my_menu.add_cascade(label="Remove songs", menu=remove_song_menu)
remove_song_menu.add_command(label="Delete a song from playlist", command=delete_song)
remove_song_menu.add_command(label="Delete all songs from playlist", command=delete_all_songs)

#
status_bar = Label(root, text='', bd=5, relief=GROOVE, anchor=E)
status_bar.grid(row=4, column=1, padx=20, pady=20)

###############################################################################global variables
audiotrack = StringVar()

currentvolume = 0
totalsonglength = 0
count = 0
text = ''
realnames = []
next_one = 0

######################################################################################Create slider
aa = 'Developed By KAMM'

SliderLabel = Label(root, text=aa, bg='brown', font=('arial', 30, 'italic bold '))
SliderLabel.grid(row=3, column=0, padx=20, pady=20, columnspan=3)


def IntroLabelTrick():
    global count, text
    if (count >= len(aa)):
        count = -1
        text = ''
        SliderLabel.configure(text=text)
    else:
        text = text + aa[count]
        SliderLabel.configure(text=text)
    count = count + 1
    SliderLabel.after(200, IntroLabelTrick)


IntroLabelTrick()
mixer.init()
createwidthes()
root.mainloop()
